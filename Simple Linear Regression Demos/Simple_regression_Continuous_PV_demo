---
title: "Correlation and Simple Linear Regression Demo"
subtitle: "Continuous Predictor"
author: "Professor Christopher J. Schmank, PhD"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      message = FALSE,
                      warning = FALSE)
```

### Required Libraries

```{r}
library(tidyverse)
library(dplyr)
library(kableExtra)
library(psych)
library(jmv)
library(lm.beta) 
library(skimr)
library(broom)
library(moderndive)
library(gapminder)
```

### First load in the data

```{r}
load(url("http://www.openintro.org/stat/data/evals.RData"))
evals <- evals %>%
  select(score, bty_avg, age)

```

### Exploratory Data Analysis

1. Observe raw data
1. Compute descriptive statistics
1. Visualize data

### Observe raw data

Remember, you should always technically do more than `head()` or `glimpse()` --- take the time to observe the raw data to see if anything jumps out at you!

```{r}
head(evals)
#glimpse(evals)
#View(evals)

```

### Compute descriptive statistics

```{r}
## Can use any of the function calls below to conduct descriptives 
## My personal preference is the `describe()` function
describe(evals)

## These alternatives give you many descriptive stats but nothing about normality
# skim(evals)
# summary(evals)
# skim_without_charts(evals)

## Don't forget correlations!
corrMatrix(evals)

```

### Visualize the data

```{r}
## Histograms

ggplot(data = evals, 
       mapping = aes(x = score)) +
  geom_histogram(bins = 10, 
                 color = "seagreen", 
                 fill="black")

ggplot(data = evals, 
       mapping = aes(x = bty_avg)) +
  geom_histogram(bins = 10, 
                 color = "seagreen", 
                 fill="black")

ggplot(data = evals, 
       mapping = aes(x = age)) +
  geom_histogram(bins = 10, 
                 color = "seagreen", 
                 fill="black")

```

```{r}
## Boxplots
ggplot(data = evals, 
       mapping = aes(y = score)) +
  geom_boxplot()

ggplot(data = evals, 
       mapping = aes(y = bty_avg)) +
  geom_boxplot()

ggplot(data = evals, 
       mapping = aes(y = age)) +
  geom_boxplot()

```

```{r}
## Scatterplots
ggplot(evals, 
       aes(x = bty_avg, 
           y = score)) +
  geom_point() +
  labs(x = "Beauty Score", 
       y = "Teaching Score",
       title = "Relationship of Teaching and Beauty Score") +
  geom_smooth(method = "lm")

ggplot(evals, 
       aes(x = age, 
           y = score)) +
  geom_point() +
  labs(x = "Age", 
       y = "Teaching Score",
       title = "Relationship of Teaching and Age") +
  geom_smooth(method = "lm")

```


### Now lets run our simple linear regression (`lm()` workflow + `broom` package)
```{r}
score_model <- lm(score ~ bty_avg, data = evals)

# Get regression table using `tidy()`:
tidy(score_model, conf.int=TRUE)

# Get model fit table using `glance()`:
glance(score_model)

```

### Alternatively we can use `linReg()` from the `jmv` package
```{r}
linReg(evals,
       dep=score,
       covs=bty_avg,
       blocks=list(list('bty_avg')),
       anova=TRUE,
       stdEst=TRUE,
       ci=TRUE,
       ciStdEst=TRUE)

```

### Lastly we should conduct a residual analysis

```{r}
regression_points <- get_regression_points(score_model)

# Scatterplot of Explanatory Variable along x-axis and Residuals along y-axis
ggplot(regression_points, 
       aes(x = bty_avg, y = residual)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Residual") +
  geom_hline(yintercept = 0, col = "blue", size = 1)

# Additionally we want to look at the distribution of residuals
ggplot(regression_points, 
       aes(x = residual)) +
  geom_histogram(bins = 10, color = "forestgreen") +
  labs(x = "Residual")

describe(regression_points$residual)

```

